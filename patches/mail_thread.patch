diff -urN Mail-Thread-2.1/MANIFEST Mail-Thread-2.1_richardc/MANIFEST
--- Mail-Thread-2.1/MANIFEST	2003-03-31 12:08:51.000000000 +0100
+++ Mail-Thread-2.1_richardc/MANIFEST	2003-04-12 20:30:53.000000000 +0100
@@ -3,6 +3,7 @@
 MANIFEST
 README
 Thread.pm
+t/common.pl
 t/1.t
 t/2.t
 t/3.t
@@ -10,6 +11,7 @@
 t/5.t
 t/6.t
 t/7.t
+t/8.t
 t/testbox
 t/testbox-2
 t/testbox-3
@@ -17,3 +19,4 @@
 t/testbox-5
 t/testbox-6
 t/testbox-7
+t/testbox-8
diff -urN Mail-Thread-2.1/Thread.pm Mail-Thread-2.1_richardc/Thread.pm
--- Mail-Thread-2.1/Thread.pm	2003-03-31 12:08:58.000000000 +0100
+++ Mail-Thread-2.1_richardc/Thread.pm	2003-04-12 20:24:16.000000000 +0100
@@ -2,8 +2,8 @@
 
 use 5.00503;
 use strict;
-use vars qw($VERSION);
-sub debug (@) { print @_ if $Mail::Thread::debug }
+use vars qw($VERSION $debug);
+sub debug (@) { print @_ if $debug }
 
 $VERSION = '2.1';
 
@@ -32,8 +32,9 @@
     no warnings 'uninitialized';
     my @references = ($class->_get_hdr($msg, "References") =~ /<([^>]+)>/g);
     my $foo = $class->_get_hdr($msg,"In-Reply-To");
+    chomp $foo;
     $foo =~ s/.*?<([^>]+)>.*/$1/;
-    push @references, $foo if $foo =~ /\S+\@\S+/ and $references[-1] ne $foo;
+    push @references, $foo if $foo =~ /^\S+\@\S+$/ and $references[-1] ne $foo;
     return _uniq(@references);
 }
 
@@ -41,6 +42,8 @@
     my ($class, $msg) = @_;
     my $id= $msg->isa("Mail::Message") ? $msg->messageId :
             $class->_get_hdr($msg, "Message-ID");
+    die "attempt to thread message with no id" unless $id;
+    chomp $id;
     $id =~ s/^<([^>]+)>.*/$1/; # We expect this not to have <>s
     return $id;
 }
@@ -50,7 +53,7 @@
 sub _dump {
     for (@_) {
         print "\n$_ (";
-        print $_->messageid.") [".$_->subject."] has father ".eval{$_->parent};
+        print $_->id.") [".$_->subject."] has father ".eval{$_->parent};
         print ", child ".eval{$_->child}." and sibling ".eval{$_->next};
         print "\n";
         for my $tag (qw(parent child next)) {
@@ -65,8 +68,14 @@
     $self->{rootset} = [ grep { !$_->parent } values %{$self->{id_table}} ];
     delete $self->{id_table};
     delete $self->{seen};
-    $self->{rootset} = [ map {$self->_prune_empties($_, 0)} @{$self->{rootset}} ]
-        unless $Mail::Thread::noprune;
+    unless ($Mail::Thread::noprune) {
+        local $debug = 0;
+        my $fakeroot = $self->_container_class->new( id => 'fakeroot' );
+        $fakeroot->set_children( $self->rootset );
+        $self->_prune_empties($fakeroot, 0);
+        @{$self->{rootset}} = $fakeroot->children; 
+        $_->next(undef) for $self->rootset;
+    }
     delete $self->{seen};
     #$self->_group_set_bysubject();
     $self->_finish();
@@ -84,12 +93,11 @@
         debug "  Found an existing container for $id, ", $cont->subject,"\n";
     } else {
         debug "  Creating something new to hold $id\n";
-        $cont= $self->_container_class->new($id);
+        $cont= $self->_container_class->new(id => $id);
         $self->{id_table}{$id} = $cont;
     }
-    $cont->messageid($id);
+    $cont->id($id);
     return $cont;
-
 }
 
 sub _container_class { "Mail::Thread::Container" }
@@ -118,7 +126,7 @@
         }
         if (defined $prev) { $prev->add_child($this_container) }
         debug "Done with this message!\n----\n";
-        if ($Mail::Thread::debug) {
+        if ($debug) {
             _dump( values %{$self->{id_table}} );
         }
     }
@@ -136,34 +144,44 @@
     my $level = shift;
     do { debug "Stuffed!"; return () } if $self->{seen}{$cont}++;
     debug " "x$level;
-    debug "Looking at ".$cont->messageid."\n";
+    debug "Looking at ".$cont->id."\n";
 
-    my @new_children;
-    for my $ctr ($cont->children) {
-        debug " "x$level;
-        debug "Recursing on child ".$ctr->messageid."\n";
-        my @L = $self->_prune_empties($ctr, $level+1);
-        push @new_children, @L;
-        debug " "x$level;
-        debug "Removing child ".$ctr->messageid."\n";
-        $ctr->remove_child($ctr);
-    }
-
-    debug " "x$level;
-    debug "Adding children @new_children\n";
-    $cont->add_child($_) for @new_children;
-    if (!$cont->message and !$cont->children) {
-        debug " "x$level;
-        debug "No message and no children - killing\n";
-        return ();
-    }
-    my @children = $cont->children;
-    if (!$cont->message and @children == 1 and $cont->parent) {
-        debug "Promoting the child of ".$cont->messageid."\n";
-        $cont->remove_child($_) for @children;
-        return @children;
+    my ($walk, $prev, $next);
+    for ($walk = $cont->child, $next = eval { $walk->next }; 
+         $walk; 
+         $prev = $walk, $walk = $next, $next = eval { $walk->next } ) {
+
+       my @children = $walk->children;
+       debug " "x$level;
+       debug "Looking at ".$walk->id." ".@children." children\n";
+
+       if (!$walk->message and !@children) {
+           debug "No message and no children - killing\n";
+           if (!$prev) { $cont->child($walk->next) }
+           else        { $prev->next($walk->next)  }
+           $walk = $prev;
+	   next;
+       }
+        
+       if (!$walk->message and @children and (@children == 1 or $walk->parent)) {
+           debug "Promoting the children\n";
+           my $kids = $walk->child;
+           if (!$prev) { $cont->child($kids) }
+           else        { $prev->next($kids)  }
+
+           $_->parent($walk->parent) for @children;
+           $children[-1]->next( $walk->next );
+
+           $next = $kids;
+           $walk = $prev;
+           next;
+       }
+
+       if ($walk->child) {
+           debug "recursing on down\n";
+           $self->_prune_empties($walk, $level + 1);
+       }
     }
-    return $cont;
 }   
 
 package Mail::Thread::Container;
@@ -175,8 +193,8 @@
 sub child   { $_[0]->{child}   = $_[1] if @_ == 2; $_[0]->{child}   }
 sub parent  { $_[0]->{parent}  = $_[1] if @_ == 2; $_[0]->{parent}  }
 sub next    { $_[0]->{next}    = $_[1] if @_ == 2; $_[0]->{next}    }
-sub messageid { $_[0]->{id}      = $_[1] if @_ == 2; $_[0]->{id}      }
-sub subject { eval { $_[0]->message->head->get("Subject") } }
+sub id      { $_[0]->{id}      = $_[1] if @_ == 2; $_[0]->{id}      }
+sub subject { eval { my $s = $_[0]->message->head->get("Subject") ||''; chomp $s; $s } }
 
 sub add_child {
     my ($self, $child) = @_;
@@ -245,6 +263,13 @@
     return @children;
 }
 
+sub set_children {
+    my $self = shift;
+    my $walk = $self->child( shift );
+    while (@_) { $walk = $walk->next( shift ) }
+    $walk->next(undef) if $walk;
+}
+
 sub recurse_down {
     my %seen;
     my $do_it_all;
@@ -254,9 +279,9 @@
         $seen{$self}++;
         $callback->($self);
 
-        if ($seen{$self->next}) { $self->next(undef) }
+        if ($self->next && $seen{$self->next}) { $self->next(undef) }
         $do_it_all->($self->next, $callback)  if $self->next;
-        if ($seen{$self->child}) { $self->child(undef) }
+        if ($self->child && $seen{$self->child}) { $self->child(undef) }
         $do_it_all->($self->child, $callback) if $self->child;
 
     };
@@ -282,7 +307,7 @@
 
     sub dump_em {
         my ($self, $level) = @_;
-        debug (' \\-> ' x $level);
+        print ' \\-> ' x $level;
         if ($self->message) {
             print $self->message->head->get("Subject") , "\n";
         } else {
diff -urN Mail-Thread-2.1/t/1.t Mail-Thread-2.1_richardc/t/1.t
--- Mail-Thread-2.1/t/1.t	2003-03-10 13:06:56.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/1.t	2003-04-11 22:39:57.000000000 +0100
@@ -1,14 +1,10 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 3;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox");
 
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages('t/testbox'));
 $Mail::Thread::debug=0;
 
 $Mail::Thread::noprune=1;
@@ -27,8 +23,8 @@
         use Data::Dumper; die Dumper $self;
     }
     push @stuff, 
-    [ $level, eval { "".$self->message->head->get("Subject") }
-             || "[ Message not available ]" ];
+    [ $level, $self->message ? $self->subject : "[ Message not available ]" ];
+            
     dump_em($self->next, $level) if $self->next;
     dump_em($self->child, $level+1) if $self->child;
 }
diff -urN Mail-Thread-2.1/t/2.t Mail-Thread-2.1_richardc/t/2.t
--- Mail-Thread-2.1/t/2.t	2003-03-11 15:02:53.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/2.t	2003-04-12 20:13:47.000000000 +0100
@@ -1,26 +1,22 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 9;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-2");
 
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages('t/testbox-2'));
 
 my @stuff;
 for (0..3) { # This tests that multiple applications of the algorithm work OK.
     @stuff = ();
-$threader->thread;
+    $threader->thread;
 
-is($threader->rootset, 1, "We have one main threads");
+    is($threader->rootset, 1, "We have one main threads");
 
-for ($threader->rootset) { dump_em($_, 0); }
+    for ($threader->rootset) { dump_em($_, 0); }
 
-is_deeply(\@stuff,
- [
+    is_deeply(\@stuff,
+      [
           [ 0, "sort numbers", '20030101210258.63148.qmail@web20805.mail.yahoo.com' ],
           [ 1, "Re: sort numbers", 'auvpjq$ede$1@post.home.lunix' ],
           [ 1, "Re: sort numbers", 'r3i71vcul4g95orb58173qj6b8dus6pnch@4ax.com' ]
@@ -30,7 +26,7 @@
 sub dump_em {
     my ($self, $level) = @_;
     push @stuff, 
-    [ $level, eval { "".$self->message->head->get("Subject") }, $self->{id}
+    [ $level, $self->subject, $self->{id}
              || "[ Message not available ]" ];
     dump_em($self->next, $level) if $self->next;
     dump_em($self->child, $level+1) if $self->child;
diff -urN Mail-Thread-2.1/t/3.t Mail-Thread-2.1_richardc/t/3.t
--- Mail-Thread-2.1/t/3.t	2003-03-25 15:32:08.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/3.t	2003-04-12 20:26:44.000000000 +0100
@@ -1,14 +1,10 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 3;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-3");
 
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages('t/testbox-3'));
 $threader->thread;
 
 is($threader->rootset, 1, "We have one main thread");
@@ -21,9 +17,8 @@
 sub dump_em {
     my ($self, $level) = @_;
     push @stuff, 
-    [ $level, 
-    (eval { "".$self->message->head->get("Subject") } || "[ Message not available ]")
-    , $self->{id} ];
+    [ $level, $self->message ? $self->subject : "[ Message not available ]",
+      $self->{id} ];
     dump_em($self->next, $level) if $self->next;
     dump_em($self->child, $level+1) if $self->child;
 }
@@ -38,18 +33,13 @@
           ],
           [
             1,
-            '[ Message not available ]',
-            '20030102144211.GV7700@ox.compsoc.net'
-          ],
-          [
-            1,
             'Re: Zip/Postal codes.',
-            '20030102115117.A21351@cs839290-a.mtth.phub.net.cable.rogers.com'
+            '3E146C15.8000302@ntlworld.com'
           ],
           [
             1,
             'Re: Zip/Postal codes.',
-            '3E146C15.8000302@ntlworld.com'
+            '20030102115117.A21351@cs839290-a.mtth.phub.net.cable.rogers.com'
           ],
           [
             2,
diff -urN Mail-Thread-2.1/t/4.t Mail-Thread-2.1_richardc/t/4.t
--- Mail-Thread-2.1/t/4.t	2003-03-17 07:06:37.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/4.t	2003-04-11 21:34:23.000000000 +0100
@@ -1,14 +1,9 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 3;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-4");
-
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages('t/testbox-4'));
 
 $threader->thread;
 
@@ -22,8 +17,8 @@
 sub dump_em {
     my ($self, $level) = @_;
     push @stuff, 
-    [ $level, eval { "".$self->message->head->get("Subject") }, $self->{id}
-             || "[ Message not available ]" ];
+    [ $level, $self->message ? $self->subject : "[ Message not available ]", 
+      $self->{id} ];
     dump_em($self->next, $level) if $self->next;
     dump_em($self->child, $level+1) if $self->child;
 }
diff -urN Mail-Thread-2.1/t/5.t Mail-Thread-2.1_richardc/t/5.t
--- Mail-Thread-2.1/t/5.t	2003-03-25 16:03:02.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/5.t	2003-04-11 22:44:18.000000000 +0100
@@ -1,7 +1,5 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 2;
 use_ok("Mail::Thread");
@@ -17,18 +15,14 @@
 our %stuff;
 
 sub new {
-    my ($class, $id) = @_;
-    if (!$stuff{$id})  { $stuff{$id} = $class->SUPER::new($id); }
+    my ($class, undef, $id) = @_;
+    if (!$stuff{$id})  { $stuff{$id} = $class->SUPER::new(id => $id); }
     return $stuff{$id};
-
 }
 
 package main;
 
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-5");
-
-for ($box->messages) {
+for (slurp_messages('t/testbox-5')) {
     my $threader = new My::Thread($_);
 
     $threader->thread;
diff -urN Mail-Thread-2.1/t/6.t Mail-Thread-2.1_richardc/t/6.t
--- Mail-Thread-2.1/t/6.t	2003-03-25 16:03:16.000000000 +0000
+++ Mail-Thread-2.1_richardc/t/6.t	2003-04-11 20:32:59.000000000 +0100
@@ -1,14 +1,10 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 2;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-6");
 
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages('t/testbox-6'));
 $threader->thread;
 
 ok(2, "Avoid loops at all cost");
diff -urN Mail-Thread-2.1/t/7.t Mail-Thread-2.1_richardc/t/7.t
--- Mail-Thread-2.1/t/7.t	2003-03-31 12:08:35.000000000 +0100
+++ Mail-Thread-2.1_richardc/t/7.t	2003-04-11 20:33:01.000000000 +0100
@@ -1,14 +1,10 @@
-BEGIN { eval "use Mail::Box::Manager;"; 
-    if ($@) { require Test::More; Test::More->import(skip_all =>
-        "You don't have Mail::Box::Manager"); exit; }
-}
+#!perl -w
+BEGIN { require 't/common.pl' }
 
 use Test::More tests => 2;
 use_ok("Mail::Thread");
-my $mgr = new Mail::Box::Manager;
-my $box = $mgr->open(folder => "t/testbox-7");
 
-my $threader = new Mail::Thread($box->messages);
+my $threader = new Mail::Thread(slurp_messages 't/testbox-7');
 $threader->thread;
 
 is($threader->rootset, 1, "We have one main thread");
diff -urN Mail-Thread-2.1/t/8.t Mail-Thread-2.1_richardc/t/8.t
--- Mail-Thread-2.1/t/8.t	1970-01-01 01:00:00.000000000 +0100
+++ Mail-Thread-2.1_richardc/t/8.t	2003-04-12 20:08:57.000000000 +0100
@@ -0,0 +1,47 @@
+#!perl -w
+BEGIN { require 't/common.pl' }
+
+use Test::More tests => 3;
+use_ok("Mail::Thread");
+
+# this tests multi-level pruning
+
+my $threader = new Mail::Thread(slurp_messages('t/testbox-8'));
+$threader->thread;
+
+is($threader->rootset, 1, "We have one thread");
+
+my @stuff;
+for ($threader->rootset) {
+    dump_em($_, 0);
+}
+
+sub dump_em {
+    my ($self, $level) = @_;
+    if ($self->next and ref($self->next) !~ /Container/) {
+        use Data::Dumper; die Dumper $self;
+    }
+    push @stuff, 
+    [ $level, $self->message ? $self->subject : "[ Message not available ]" ];
+            
+    dump_em($self->next, $level) if $self->next;
+    dump_em($self->child, $level+1) if $self->child;
+}
+
+is_deeply(\@stuff,
+  [
+      [
+        0,
+        'Re: spamassassin'
+      ],
+      [
+        1,
+        'Re: spamassassin'
+      ],
+      [
+        1,
+        'Re: spamassassin'
+      ]
+    ],
+ , "It all works");
+
diff -urN Mail-Thread-2.1/t/common.pl Mail-Thread-2.1_richardc/t/common.pl
--- Mail-Thread-2.1/t/common.pl	1970-01-01 01:00:00.000000000 +0100
+++ Mail-Thread-2.1_richardc/t/common.pl	2003-04-11 22:39:09.000000000 +0100
@@ -0,0 +1,26 @@
+use strict;
+BEGIN { eval "use Mail::Internet;";
+    if ($@) { 
+	require Test::More; 
+	Test::More->import(skip_all =>"You don't have Mail::Internet"); 
+	exit; 
+    }
+}
+
+sub slurp_messages {
+    my $mbox = shift;
+    open FH, $mbox or return;
+    my @messages;
+    my @lines;
+    while (<FH>) {
+	if (/^From / && @lines) {
+            my $mail = Mail::Internet->new(\@lines);
+            push @messages, $mail;
+            @lines = ();
+        }
+        push @lines, $_;
+    }
+    return @messages, Mail::Internet->new(\@lines);
+}
+
+1;
diff -urN Mail-Thread-2.1/t/testbox-8 Mail-Thread-2.1_richardc/t/testbox-8
--- Mail-Thread-2.1/t/testbox-8	1970-01-01 01:00:00.000000000 +0100
+++ Mail-Thread-2.1_richardc/t/testbox-8	2003-04-12 17:12:24.000000000 +0100
@@ -0,0 +1,312 @@
+From london.pm-admin@london.pm.org Sat Mar  1 13:51:44 2003
+Return-Path: <london.pm-admin@london.pm.org>
+Received: from pop3.demon.co.uk
+	by localhost with POP3 (fetchmail-6.2.1)
+	for richardc@localhost (single-drop); Sat, 01 Mar 2003 13:51:44 +0000 (GMT)
+Received: from punt-2.mail.demon.net by mailstore for richardc@mirth.demon.co.uk
+          id 1046477935:20:04275:7; Sat, 01 Mar 2003 00:18:55 GMT
+Received: from penderel.state51.co.uk ([193.82.57.128]) by punt-2.mail.demon.net
+           id aa2002979; 1 Mar 2003 0:18 GMT
+Received: from localhost ([127.0.0.1] helo=penderel.state51.co.uk)
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18oudn-000563-00; Sat, 01 Mar 2003 00:14:11 +0000
+Received: from theproject.fierypit.org ([217.10.129.148])
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18oucw-00055d-00
+	for <london.pm@london.pm.org>; Sat, 01 Mar 2003 00:13:18 +0000
+Received: from bob (helo=localhost)
+	by theproject.fierypit.org with local-esmtp (Exim 3.36 #1)
+	id 18ougI-0007Qc-00
+	for london.pm@london.pm.org; Sat, 01 Mar 2003 00:16:46 +0000
+From: Bob Walker <bob@randomness.org.uk>
+X-X-Sender: bob@theproject.fierypit.org
+To: london.pm@london.pm.org
+Subject: Re: spamassassin
+In-Reply-To: <200302282323.h1SNN4o15987@rszemeti.demon.co.uk>
+Message-ID: <Pine.GSO.4.50.0303010015230.21567-100000@theproject.fierypit.org>
+References: <20030228174141.GA12360@plough.barnyard.co.uk>
+ <20030228202957.GA12579@plough.barnyard.co.uk>
+ <Pine.GSO.4.50.0302282233040.21567-100000@theproject.fierypit.org>
+ <200302282323.h1SNN4o15987@rszemeti.demon.co.uk>
+MIME-Version: 1.0
+Content-Type: TEXT/PLAIN; charset=US-ASCII
+Sender: london.pm-admin@london.pm.org
+Errors-To: london.pm-admin@london.pm.org
+X-BeenThere: london.pm@london.pm.org
+X-Mailman-Version: 2.0.11
+Precedence: bulk
+Reply-To: london.pm@london.pm.org
+List-Help: <mailto:london.pm-request@london.pm.org?subject=help>
+List-Post: <mailto:london.pm@london.pm.org>
+List-Subscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=subscribe>
+List-Id: London.pm Perl M[ou]ngers <london.pm.london.pm.org>
+List-Unsubscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=unsubscribe>
+List-Archive: <http://london.pm.org/pipermail/london.pm/>
+X-Original-Date: Sat, 1 Mar 2003 00:16:46 +0000 (GMT)
+Date: Sat, 1 Mar 2003 00:16:46 +0000 (GMT)
+Status: RO
+Content-Length: 1208
+
+On Fri, 28 Feb 2003, Robin Szemeti wrote:
+
+> On Friday 28 February 2003 22:34, Bob Walker wrote:
+> > On Fri, 28 Feb 2003, David Cantrell wrote:
+> > > I'd forgotten about running stuff out of inittab though - I don't often
+> > > go delving in there.  It's a bit of a nasty hack though.
+>
+> I saved forgetting abut innittab by not knowing about it in the first place :)
+>
+> > you could always do it with DJB's deamontools. which checks to make sure
+> > things are runnign and if not starts them.
+>
+> ooh .. wild guess .. (ive not seen that particular peice of DJB crackware) ..
+> mmm it will need a /daemontools directory (as in a new directory in / ) the
+> config files are in /var, the binaries too. the there will be some lock
+> files, they could be anywhere .. there will be no man pages (except on the
+> net, that way they are never out of date, but may not match your software) ...
+>
+> am I close?
+
+yep. som eo fhis tuff is quite nice though. and yes he does have slight
+quirks. Im led to belive he doesnt comment his code either.
+
+>
+>
+
+-- 
+Bob Walker
+http://www.randomness.org.uk/
+Help! Mutated Tigers from the Antartic are invading Outer Mongolia.
+Send the Mashed Bunnies of Perpignan to defeat them.
+
+
+From london.pm-admin@london.pm.org Sat Mar  1 13:51:46 2003
+Return-Path: <london.pm-admin@london.pm.org>
+Received: from pop3.demon.co.uk
+	by localhost with POP3 (fetchmail-6.2.1)
+	for richardc@localhost (single-drop); Sat, 01 Mar 2003 13:51:46 +0000 (GMT)
+Received: from punt-2.mail.demon.net by mailstore for richardc@mirth.demon.co.uk
+          id 1046483429:20:10963:20; Sat, 01 Mar 2003 01:50:29 GMT
+Received: from penderel.state51.co.uk ([193.82.57.128]) by punt-2.mail.demon.net
+           id aa2010747; 1 Mar 2003 1:50 GMT
+Received: from localhost ([127.0.0.1] helo=penderel.state51.co.uk)
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18ow0A-0005iA-00; Sat, 01 Mar 2003 01:41:22 +0000
+Received: from anchor-post-35.mail.demon.net ([194.217.242.85])
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18ovzM-0005hi-00
+	for <london.pm@london.pm.org>; Sat, 01 Mar 2003 01:40:32 +0000
+Received: from rszemeti.demon.co.uk ([158.152.98.107])
+	by anchor-post-35.mail.demon.net with esmtp (Exim 3.36 #2)
+	id 18ow2i-0003A2-0Z
+	for london.pm@london.pm.org; Sat, 01 Mar 2003 01:44:00 +0000
+Received: from localhost (localhost [[UNIX: localhost]])
+	by rszemeti.demon.co.uk (8.11.6/8.11.2) id h211hvD16626
+	for london.pm@london.pm.org; Sat, 1 Mar 2003 01:43:57 GMT
+Message-Id: <200303010143.h211hvD16626@rszemeti.demon.co.uk>
+Content-Type: text/plain;
+  charset="iso-8859-1"
+From: Robin Szemeti <robin@rszemeti.demon.co.uk>
+Organization: home
+To: london.pm@london.pm.org
+Subject: Re: spamassassin
+X-Mailer: KMail [version 1.3.1]
+References: <20030228174141.GA12360@plough.barnyard.co.uk> <200302282323.h1SNN4o15987@rszemeti.demon.co.uk> <Pine.GSO.4.50.0303010015230.21567-100000@theproject.fierypit.org>
+In-Reply-To: <Pine.GSO.4.50.0303010015230.21567-100000@theproject.fierypit.org>
+X-No-Archive: No
+X-Mail-Archiver: Aardvark Platinum V2.03 ( with XML parse tree options )
+MIME-Version: 1.0
+Content-Transfer-Encoding: 8bit
+Sender: london.pm-admin@london.pm.org
+Errors-To: london.pm-admin@london.pm.org
+X-BeenThere: london.pm@london.pm.org
+X-Mailman-Version: 2.0.11
+Precedence: bulk
+Reply-To: london.pm@london.pm.org
+X-Reply-To: robin@redpoint.org.uk
+List-Help: <mailto:london.pm-request@london.pm.org?subject=help>
+List-Post: <mailto:london.pm@london.pm.org>
+List-Subscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=subscribe>
+List-Id: London.pm Perl M[ou]ngers <london.pm.london.pm.org>
+List-Unsubscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=unsubscribe>
+List-Archive: <http://london.pm.org/pipermail/london.pm/>
+X-Original-Date: Sat, 1 Mar 2003 01:43:56 +0000
+Date: Sat, 1 Mar 2003 01:43:56 +0000
+Status: RO
+Content-Length: 478
+
+On Saturday 01 March 2003 00:16, Bob Walker wrote:
+> On Fri, 28 Feb 2003, Robin Szemeti wrote:
+> > am I close?
+>
+> yep. som eo fhis tuff is quite nice though. and yes he does have slight
+> quirks. Im led to belive he doesnt comment his code either.
+
+oh for sure .. qmail works well etc etc ... the only things I find odd are 
+his layout .. new dirs in / whenever he feels like it ... binaries in /var 
+etc .. weirdass stuff .. but yes .. it *does* work well
+
+-- 
+Robin Szemeti
+
+
+From london.pm-admin@london.pm.org Sat Mar  1 13:51:43 2003
+Return-Path: <london.pm-admin@london.pm.org>
+Received: from pop3.demon.co.uk
+	by localhost with POP3 (fetchmail-6.2.1)
+	for richardc@localhost (single-drop); Sat, 01 Mar 2003 13:51:43 +0000 (GMT)
+Received: from punt-1.mail.demon.net by mailstore for richardc@mirth.demon.co.uk
+          id 1046514550:10:05020:11; Sat, 01 Mar 2003 10:29:10 GMT
+Received: from penderel.state51.co.uk ([193.82.57.128]) by punt-1.mail.demon.net
+           id aa1004775; 1 Mar 2003 10:28 GMT
+Received: from localhost ([127.0.0.1] helo=penderel.state51.co.uk)
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18p4B5-0000g6-00; Sat, 01 Mar 2003 10:25:11 +0000
+Received: from colon.colondot.net ([193.201.200.70] ident=mailnull)
+	by penderel.state51.co.uk with esmtp (Exim 3.35 #1 (Debian))
+	id 18p4AG-0000fa-00
+	for <london.pm@london.pm.org>; Sat, 01 Mar 2003 10:24:20 +0000
+Received: from mbm by colon.colondot.net with local (Exim 4.10)
+	id 18p4Dc-000HiF-00
+	for london.pm@london.pm.org; Sat, 01 Mar 2003 10:27:48 +0000
+From: Lusercop <`the.lusercop'@lusercop.net>
+To: london.pm@london.pm.org
+Subject: Re: spamassassin
+Message-ID: <20030301102748.GC67225@colon.colondot.net>
+References: <20030228174141.GA12360@plough.barnyard.co.uk> <20030228202957.GA12579@plough.barnyard.co.uk> <Pine.GSO.4.50.0302282233040.21567-100000@theproject.fierypit.org> <200302282323.h1SNN4o15987@rszemeti.demon.co.uk> <Pine.GSO.4.50.0303010015230.21567-100000@theproject.fierypit.org>
+Mime-Version: 1.0
+Content-Type: text/plain; charset=us-ascii
+Content-Disposition: inline
+In-Reply-To: <Pine.GSO.4.50.0303010015230.21567-100000@theproject.fierypit.org>
+User-Agent: Mutt/1.4i
+Organization: Lusercop
+Mail-Copies-To: never
+Sender: london.pm-admin@london.pm.org
+Errors-To: london.pm-admin@london.pm.org
+X-BeenThere: london.pm@london.pm.org
+X-Mailman-Version: 2.0.11
+Precedence: bulk
+Reply-To: london.pm@london.pm.org
+List-Help: <mailto:london.pm-request@london.pm.org?subject=help>
+List-Post: <mailto:london.pm@london.pm.org>
+List-Subscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=subscribe>
+List-Id: London.pm Perl M[ou]ngers <london.pm.london.pm.org>
+List-Unsubscribe: <http://london.pm.org/mailman/listinfo/london.pm>,
+	<mailto:london.pm-request@london.pm.org?subject=unsubscribe>
+List-Archive: <http://london.pm.org/pipermail/london.pm/>
+X-Original-Date: Sat, 1 Mar 2003 10:27:48 +0000
+Date: Sat, 1 Mar 2003 10:27:48 +0000
+Status: RO
+Content-Length: 3117
+
+On Sat, Mar 01, 2003 at 12:16:46AM +0000, Bob Walker wrote:
+> yep. som eo fhis tuff is quite nice though. and yes he does have slight
+> quirks. Im led to belive he doesnt comment his code either.
+
+(qmail-1.03/datetime.c)
+| void datetime_tai(dt,t)
+| struct datetime *dt;
+| datetime_sec t;
+| {
+|   int day;
+|   int tod;
+|   int year;
+|   int yday;
+|   int wday;
+|   int mon;
+|  
+|   tod = t % 86400;
+|   day = t / 86400;
+|   if (tod < 0) { tod += 86400; --day; }
+|  
+|   dt->hour = tod / 3600;
+|   tod %= 3600;
+|   dt->min = tod / 60;
+|   dt->sec = tod % 60;
+|  
+|   wday = (day + 4) % 7; if (wday < 0) wday += 7;
+|   dt->wday = wday;
+|  
+|   day -= 11017;
+|   /* day 0 is march 1, 2000 */
+
+First comment
+
+|   year = 5 + day / 146097;
+|   day = day % 146097; if (day < 0) { day += 146097; --year; }
+|   /* from now on, day is nonnegative */
+
+Second comment
+
+|   year *= 4;
+|   if (day == 146096) { year += 3; day = 36524; }
+|   else { year += day / 36524; day %= 36524; }
+|   year *= 25;
+|   year += day / 1461;
+|   day %= 1461;
+|   year *= 4;
+|   yday = (day < 306);
+|   if (day == 1460) { year += 3; day = 365; }
+|   else { year += day / 365; day %= 365; }
+|   yday += day;
+|  
+|   day *= 10;
+|   mon = (day + 5) / 306;
+|   day = day + 5 - 306 * mon;
+|   day /= 10;
+|   if (mon >= 10) { yday -= 306; ++year; mon -= 10; }
+|   else { yday += 59; mon += 2; }
+|  
+|   dt->yday = yday;
+|   dt->year = year - 1900;
+|   dt->mon = mon;
+|   dt->mday = day + 1;
+| }
+
+So 2 comments and at least 12 unique unobvious undocumented constants.
+
+(qmail-1.03/qmail-send.c) has lots of:
+| /* this file is too long ----------------------------------------- xxxxx */
+
+which is really helpful. But of course, the main code is self-documenting:
+| void fnmake_info(id) unsigned long id; { fn.len = fmtqfn(fn.s,"info/",id,1); }
+| void fnmake_todo(id) unsigned long id; { fn.len = fmtqfn(fn.s,"todo/",id,0); }
+| void fnmake_mess(id) unsigned long id; { fn.len = fmtqfn(fn.s,"mess/",id,1); }
+| void fnmake_foop(id) unsigned long id; { fn.len = fmtqfn(fn.s,"foop/",id,0); }
+
+and then we see:
+| /* 1 if by land, 2 if by sea, 0 if out of memory. not allowed to barf. */
+| /* may trash recip. must set up rwline, between a T and a \0. */
+| int rewrite(recip)
+| char *recip;
+
+In (qmail-1.03/qmail-qmtpd.c):
+|       while (len > 0) { /* XXX: could speed this up, obviously */
+|         substdio_get(&ssin,&ch,1);
+|         --len;
+|         qmail_put(&qq,&ch,1);
+|       }
+
+Obviously? With his random functions it's not obvious at all.
+
+That's enough of the *worst* things I've found. Most of it is completely
+uncommented, and the source is scattered in loads of little files with a
+single function in them. There are man pages though.
+
+I'd also like to bring your attention to a quote by Tony Finch:
+| <fanf2> what kind of dickwit writes install scripts in C?
+| <fanf2> oh djb *sigh*
+
+Unfortunately I can't find all the "/* I hate NFS */" comments, and I
+suspect they might be in ezmlm rather than qmail. Rest assured that I
+like the code for ezmlm just as much as I like the code for qmail.
+
+-- 
+Lusercop.net - LARTing Lusers everywhere since 2002
+
+
